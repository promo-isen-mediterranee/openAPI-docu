openapi: 3.0.3
info:
  title: ISEN Inventory - OpenAPI 3.0
  description: |-
    Ce document est la spécification OpenAPI3.0 de notre Web App. Vous trouverez dans ce document les différents points API Rest, avec leurs types de requêtes, description, paramètres et réponses possibles.
    
    Liens Github:
    - [Organisation Github](https://github.com/promo-isen-mediterranee)
    - [API Events](https://github.com/promo-isen-mediterranee/API_Event)
    - [API Stock](https://github.com/promo-isen-mediterranee/API_Stock)
    - [Angular](https://github.com/promo-isen-mediterranee/FrontApp)
    - [Envoie Alertes](https://github.com/promo-isen-mediterranee/Envoi_Alertes)
    - [Prédiction Stock (Where ???)]()
  version: 1.0.0
externalDocs:
  description: Vous retrouverez toutes les resources importantes sur Notion
  url: https://www.notion.so/atlas-snch/Projet-MASTER-Inventory-management-system-8269cc2ee2f647dba5b7b6f99929089f
tags:
  - name: event
    description: Tout à propos des événements
  - name: stock
    description: Tout à propos du stock
  - name: auth
    description: Tout à propos des rôles et permissions
paths:
  /event/getAll:
    get:
      tags:
        - event
      summary: Envoie tous les event
      responses:
        '200':
          description: Events renvoyé avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /event/{status}:
    get:
      tags:
        - event
      summary: Récupérer tous les événements par status
      description: Seulement une valeur de status peut être passée en paramètre
      parameters:
        - name: status
          in: path
          description: La valeur du status des événements
          required: true
          schema:
            type: string
            default: A faire
            enum:
              - A faire
              - Prêt
              - Récupéré
              - En attente de récéption
              - Réceptionné
              - Fini
      responses:
        '200':
          description: Renvoie les événements avec le status correspondant avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Le status fourni est incorrect
        '401':
          description: L'utilisateur n'est pas authentifié
        '404':
          description: Aucun événement n'a été trouvé
  /event/create:
    post:
      tags:
        - event
      summary: Créer un nouvel événement
      description: Crée un nouvel événement avec les détails fournis
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventFormData'
      responses:
        '201':
          description: Événement créé avec succès. Redirection vers l'événement
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /event/{eventId}:
    get:
      tags:
        - event
      summary: Récupérer un événement par ID
      description: Renvoie un événement
      parameters:
        - name: eventId
          in: path
          description: ID de l'événement à récupérer
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Renvoie l'événement correspondant avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: L'ID fourni est incorrect
        '401':
          description: L'utilisateur n'est pas authentifié
        '404':
          description: L'événement n'a pas été trouvé
    put:
      tags:
        - event
      summary: Mettre à jour un événement existant
      description: Met à jour les détails d'un événement existant avec les nouvelles valeurs fournies
      parameters:
        - name: eventId
          in: path
          description: ID de l'événement à mettre à jour
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventFormData'
      responses:
        '201':
          description: Événement mis à jour avec succès. Redirection vers l'événement
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '404':
          description: L'événement à mettre à jour n'a pas été trouvé
    delete:
      tags:
        - event
      summary: Supprimer un événement par ID
      description: Supprime un événement en fonction de son ID
      parameters:
        - name: eventId
          in: path
          description: ID de l'événement à supprimer
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: L'événement a été supprimé avec succès
        '400':
          description: L'ID fourni est incorrect
        '401':
          description: L'utilisateur n'est pas authentifié
        '404':
          description: L'événement à supprimer n'a pas été trouvé
  /event/location/getAll:
    get:
      tags:
        - event
      summary: Envoie toutes les location
      responses:
        '200':
          description: Locations renvoyé avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /event/status/getAll:
    get:
      tags:
        - event
      summary: Envoie tous les status possibles des événements
      responses:
        '200':
          description: Status renvoyés avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event_status'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /event/history/{eventId}:
    get:
      tags:
        - event
      summary: Récupérer l'historique d'un événement par ID
      description: Renvoie l'historique d'un événement en fonction de son ID
      parameters:
        - name: eventId
          in: path
          description: L'ID de l'événement
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Renvoie l'historique d'un événement avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventHistory'
        '400':
          description: L'ID fourni est incorrect
        '401':
          description: L'utilisateur n'est pas authentifié
        '404':
          description: L'événement n'a pas été trouvé
  /event/person/getAll:
    get:
      tags:
        - event
      summary: Récupérer tous les résponsables de la gestion des items pour les événements
      responses:
        '200':
          description: Renvoie tous les résponsables de la gestion des items pour les événements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '400':
          description: L'ID fourni est incorrect
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits
  /stock/item/create:
    post:
      tags:
        - stock
      summary: Créer un nouvel item dans le stock
      description: Crée un nouvel item avec les détails fournis
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StockItemFormData'
      responses:
        '201':
          description: Item créé avec succès. Redirection vers l'item
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /stock/item/getAll:
    get:
      tags:
        - stock
      summary: Récupérer tous les items
      description: Renvoie tous les items
      responses:
        '200':
          description: Renvoie tous les items avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemLocation'
        '400':
          description: L'ID fourni est incorrect
        '401':
          description: L'utilisateur n'est pas authentifié
        '404':
          description: L'événement n'a pas été trouvé
  /stock/item/{itemId}/{locationId}:
    get:
      tags:
        - stock
      summary: Récupérer un item par ID
      description: Renvoie un item
      parameters:
        - name: itemId
          in: path
          description: ID de l'item à récupérer
          required: true
          schema:
            type: integer
        - name: locationId
          in: path
          description: L'ID de location
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Renvoie l'item correspondant avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemLocation'
        '400':
          description: L'ID fourni est incorrect
        '401':
          description: L'utilisateur n'est pas authentifié
        '404':
          description: L'événement n'a pas été trouvé
    put:
      tags:
        - stock
      summary: Mettre à jour un item existant
      description: Met à jour les détails d'un item existant avec les nouvelles valeurs fournies
      parameters:
        - name: itemId
          in: path
          description: ID de l'item à mettre à jour
          required: true
          schema:
            type: integer
        - name: locationId
          in: path
          description: L'ID de location
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StockItemFormData'
      responses:
        '201':
          description: Item mis à jour avec succès. Redirection vers l'item
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '404':
          description: L'item à mettre à jour n'a pas été trouvé
    delete:
      tags:
        - stock
      summary: Supprimer un item par ID
      description: Supprime un item en fonction de son ID
      parameters:
        - name: itemId
          in: path
          description: ID de l'item à supprimer
          required: true
          schema:
            type: integer
        - name: locationId
          in: path
          description: L'ID de location
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: L'item a été supprimé avec succès
        '400':
          description: L'ID fourni est incorrect
        '401':
          description: L'utilisateur n'est pas authentifié
        '404':
          description: L'item à supprimer n'a pas été trouvé
  /stock/location/getAll:
    get:
      tags:
        - stock
      summary: Envoie toutes les location
      responses:
        '200':
          description: Locations renvoyé avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /stock/location/create:
    post:
      tags:
        - stock
      summary: Créé une location
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LocationForm'
      responses:
        '201':
          description: Location créée avec succès
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '409':
          description: La location existe déjà
  /stock/location/{locationId}:
    get:
      tags:
        - stock
      summary: Envoie une location en fonction de l'ID
      parameters:
        - name: locationId
          in: path
          description: ID de la location
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Renvoie la location avec succès
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '404':
          description: La location avec l'ID fourni n'existe pas
    put:
      tags:
        - stock
      summary: Met à jour une location en fonction de l'ID
      parameters:
        - name: locationId
          in: path
          description: ID de la location
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LocationForm'
      responses:
        '201':
          description: Location mise à jour avec succès
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '404':
          description: La location avec l'ID fourni n'existe pas
    delete:
      tags:
        - stock
      summary: Supprime une location en fonction de l'ID
      parameters:
        - name: locationId
          in: path
          description: ID de la location
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Location supprimée avec succès
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '404':
          description: La location avec l'ID fourni n'existe pas
  /stock/category/create:
    post:
      tags:
        - stock
      summary: Créé une nouvelle catégorie
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - label
              type: object
              properties:
                label:
                  type: string
      responses:
        '201':
          description: Catégorie créée avec succès
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '409':
          description: La catégorie éxiste déjà
  /stock/category/getAll:
    get:
      tags:
        - stock
      summary: Récupère toutes les catégories
      responses:
        '200':
          description: Renvoie toutes les catégories avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
  /stock/category/{categoryId}:
    get:
      tags:
        - stock
      summary: Récupère une catégorie en fonction de l'ID
      parameters:
        - name: categoryId
          in: path
          description: ID de la catégorie
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Renvoie la catégorie correspondante avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
    put:
      tags:
        - stock
      summary: Met à jour une catégorie en fonction de l'ID
      parameters:
        - name: categoryId
          in: path
          description: ID de la catégorie
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - label
              type: object
              properties:
                label:
                  type: string
      responses:
        '201':
          description: La catégorie mise à jour avec succès
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '404':
          description: L'ID ne correspond à aucune catégorie
    delete:
      tags:
          - stock
      summary: Supprime une catégorie en fonction de l'ID
      parameters:
        - name: categoryId
          in: path
          description: ID de la catégorie
          required: true
          schema:
            type: integer
      responses:
          '204':
            description: La catégorie supprimée avec succès
          '400':
            description: La requête est malformée ou incomplète
          '401':
            description: L'utilisateur n'est pas authentifié
          '403':
            description: L'utilisateur authentifié n'a pas les droits suffisant
          '404':
            description: L'ID ne correspond à aucune catégorie
  /stock/reserveItem:
    post:
      tags:
        - stock
      summary: Réserver un item dans le stock pour un événement
      description: Réserve un item avec les détails fournis
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StockReserveItemFormData'
      responses:
        '201':
          description: Item réservé avec succès
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '409':
          description: L'item est déjà réservé
  /stock/reservedItem/getAll/{eventId}:
    get:
      tags:
        - stock
      summary: Récupére tous les items réservés dans un événement
      parameters:
        - name: eventId
          in: path
          description: ID de l'événement
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Renvoie de tous les items réservés pour un événement
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservedItem'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '404':
          description: L'événement est introuvable
  /stock/reservedItem/getAll:
    get:
      tags:
        - stock
      summary: Récupére tous les items réservés
      responses:
        '200':
          description: Renvoie de tous les items réservés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservedItem'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '404':
          description: L'événement est introuvable
  /stock/reservedItem/edit/{eventId}/{item_locationId}:
    put:
      tags:
        - stock
      summary: Mettre à jour un item réservé
      parameters:
        - name: eventId
          in: path
          description: ID de l'événement
          required: true
          schema:
            type: integer
        - name: item_locationId
          in: path
          description: ID du lien entre l'item et la location
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StockReserveItemFormData'
      responses:
        '201':
          description: Item réservé mis à jour avec succès
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '404':
          description: L'item n'est pas réservé ou n'éxiste pas
  /stock/unreserveItem/{eventId}/{item_locationId}:
    delete:
      tags:
        - stock
      summary: Annuler la réservation d'un item pour un événement
      description: Annule la réservation d'un item avec les détails fournis
      parameters:
        - name: eventId
          in: path
          description: ID de l'événement
          required: true
          schema:
            type: integer
        - name: item_locationId
          in: path
          description: ID du lien entre l'item et la location
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Item réservé avec succès
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '404':
          description: L'item n'est pas réservé ou n'éxiste pas
  /auth/addUser:
    post:
      tags:
        - auth
      summary: Ajouter un utilisateur qui a accès à l'application
      description: Ajoute un utilisateur
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthUserForm'
      responses:
        '201':
          description: Utilisateur ajouté avec succès
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /auth/editUser/{userId}:
    put:
      tags:
        - auth
      summary: Mettre à jour un utilisateur qui a accès à l'application
      description: Met à jour un utilisateur
      parameters:
        - name: userId
          in: path
          description: ID de l'utilisateur à mettre à jour
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthUserForm'
      responses:
        '201':
          description: Utilisateur mis à jour avec succès
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /auth/getUser/{userId}:
    get:
      tags:
        - auth
      summary: Récupérer un utilisateur qui a accès à l'application
      description: Récupère un utilisateur en base de donnée
      parameters:
        - name: userId
          in: path
          description: ID de l'utilisateur à récupérer
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Utilisateur récupéré avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /auth/getAllUsers:
    get:
      tags:
        - auth
      summary: Récupérer tous les utilisateur qui ont accès à l'application
      description: Récupère tous les utilisateurs en base de donnée
      responses:
        '200':
          description: Utilisateur récupéré avec succès.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRole'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /auth/deleteUser/{userId}:
    delete:
      tags:
        - auth
      summary: Supprime un utilisateur
      parameters:
        - name: userId
          in: path
          description: ID de l'utilisateur à supprimer
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Utilisateur supprimé avec succès.
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /auth/addRoleUser/{userId}/{roleId}:
    post:
      tags:
        - auth
      summary: Ajoute un rôle à un utilisateur.
      parameters:
        - name: userId
          in: path
          description: ID de l'utilisateur
          required: true
          schema:
            type: string
            format: uuid
        - name: roleId
          in: path
          description: ID du rôle
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Rôle ajouté à l'utilisateur avec succès.
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /auth/deleteRoleUser/{userId}/{roleId}:
    delete:
      tags:
        - auth
      summary: Enlève un rôle à un utilisateur.
      parameters:
        - name: userId
          in: path
          description: ID de l'utilisateur
          required: true
          schema:
            type: string
            format: uuid
        - name: roleId
          in: path
          description: ID du rôle
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Rôle enlevé à l'utilisateur avec succès.
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /auth/addRole/{label}:
    post:
      tags:
        - auth
      summary: Créé un rôle
      parameters:
        - name: label
          in: path
          description: Label du rôle
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Rôle créé avec succès.
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '409':
          description: Rôle déjà existant
  /auth/editRole/{roleId}:
    put:
      tags:
        - auth
      summary: Met à jour un rôle
      parameters:
        - name: roleId
          in: path
          description: L'ID du rôle
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - label
              type: object
              properties:
                label:
                  type: string
      responses:
        '201':
          description: Rôle mis à jour avec succès.
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '404':
          description: Le rôle n'éxiste pas
  /auth/deleteRole/{roleId}:
    delete:
      tags:
        - auth
      summary: Supprime un rôle
      parameters:
        - name: roleId
          in: path
          description: L'ID du rôle
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Rôle supprimé avec succès.
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '404':
          description: Le rôle n'éxiste pas
  /auth/getRoles:
    get:
      tags:
        - auth
      summary: Envoie tous les rôles en base de donnée
      responses:
        '200':
          description: Rôle envoyé avec succès.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /auth/getPermissions:
    get:
      tags:
        - auth
      summary: Récupère toutes le permissions
      responses:
        '200':
          description: Renvoie toutes le permissions avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permissions'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /auth/getRolePermissions/{roleId}:
    get:
      tags:
        - auth
      summary: Récupère toutes le permissions d'un rôle
      parameters:
        - name: roleId
          in: path
          description: L'ID du rôle
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Renvoie toutes le permissions du rôle avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RolePermissions'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
  /auth/setRolePermissions/{roleId}/{permission}:
    post:
      tags:
        - auth
      summary: Définis les permissions d'un rôle
      parameters:
        - name: roleId
          in: path
          description: L'ID du rôle
          required: true
          schema:
            type: integer
        - name: permission
          in: path
          description: Les permissions sous forme de nombre
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Permissions du rôle définis avec succès
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
        '403':
          description: L'utilisateur authentifié n'a pas les droits suffisant
        '404':
          description: Le rôle est introuvable
  /auth/getAllAlerts:
    get:
      tags:
        - auth
      summary: Récupère toutes les alertes
      responses:
        '200':
          description: Renvoie toutes les alertes avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alerts'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: Accès refusé
  /auth/getAllAlerts/{roleId}:
    get:
      tags:
        - auth
      summary: Récupère toutes les alertes en fonction de l'ID du rôle
      parameters:
        - name: roleId
          in: path
          description: L'ID du rôle
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Renvoie toutes les alertes avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alerts'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: Accès refusé
  /auth/addAlert/{roleId}:
    post:
      tags:
        - auth
      summary: Créer une alert avec un rôle spécifique
      parameters:
        - name: roleId
          in: path
          description: L'ID du rôle
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Alerte créée avec succès
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: Accès refusé
  /auth/editAlert/{alertId}:
    put:
      tags:
        - auth
      summary: Met à jour une alerte
      parameters:
        - name: alertId
          in: path
          description: L'ID de l'alerte
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - mail
                - roleId
              type: object
              properties:
                mail:
                  type: string
                roleId:
                  type: integer
      responses:
        '201':
          description: Alerte mise à jour avec succès
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: Accès refusé
        '404':
          description: L'alerte n'a pas été trouvée
  /auth/deleteAlert/{alertId}:
    delete:
      tags:
        - auth
      summary: Supprimer une alerte
      parameters:
        - name: alertId
          in: path
          description: L'ID de l'alerte
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Alerte supprimée avec succès
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: Accès refusé
        '404':
          description: L'alerte n'a pas été trouvée
  /auth/login:
    post:
      tags:
        - auth
      summary: Vérifie si un utilisateur authentifié a accès à l'application
      description: Vérifie l'utilisateur et garde le token d'accès pour la session
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthLoginForm'
      responses:
        '200':
          description: L'utilisateur est connecté
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  roles:
                    type: array
                    items:
                      $ref: '#/components/schemas/RolePermissionsFormatted'
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'éxiste pas ou n'est pas autorisé à se connecter
  /auth/logout:
    post:
      tags:
        - auth
      summary: Déconnecte un utilisateur
      responses:
        '200':
          description: L'utilisateur est déconnecté
        '400':
          description: La requête est malformée ou incomplète
        '401':
          description: L'utilisateur n'est pas authentifié
components:
  schemas:
    Event_status:
      required:
        - id
        - label
      type: object
      properties:
        id:
          type: integer
          example: 1
        label:
          type: string
          example: A faire
          enum:
            - A faire
            - Prêt
            - Récupéré
            - En attente de récéption
            - Réceptionné
            - Fini
    Event_statusForm:
      required:
        - label
      type: object
      properties:
        label:
          type: string
          enum:
            - A faire
            - Prêt
            - Récupéré
            - En attente de récéption
            - Réceptionné
            - Fini
    Person:
      required:
        - id
        - last_name
        - first_name
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ceba8e06-427a-4a49-80d1-f00f0edcc5e1
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
    PersonForm:
      required:
        - last_name
        - first_name
      type: object
      properties:
        last_name:
          type: string
        first_name:
          type: string
    Event:
      required:
        - id
        - name
        - date_start
        - date_end
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: JPO
        stand_size:
          type: integer
          example: 5
        contact_objective:
          type: integer
          example: 1
        date_start:
          type: string
          example: 24-01-2024 08:00:00
        date_end:
          type: string
          example: 24-01-2024 17:00:00
        status:
          $ref: '#/components/schemas/Event_status'
        item_manager:
          $ref: '#/components/schemas/Person'
        location:
          $ref: '#/components/schemas/Location'
    EventFormData:
      required:
        - name
        - date_start
        - date_end
        - location
      type: object
      properties:
        name:
          type: string
        stand_size:
          type: integer
        contact_objective:
          type: integer
        date_start:
          type: string
        date_end:
          type: string
        status:
          $ref: '#/components/schemas/Event_statusForm'
        item_manager:
          $ref: '#/components/schemas/PersonForm'
        location:
          $ref: '#/components/schemas/LocationForm'
    User:
      required:
        - id
        - username
        - lastName
        - firstName
        - mail
        - is_active
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 2f894eb0-4df0-432b-9107-cec70ed2a3f0
        username:
          type: string
          example: john.doe
        lastName:
          type: string
          example: Doe
        firstName:
          type: string
          example: John
        mail:
          type: string
          example: john.doe@isen.yncrea.fr
        is_active:
          type: boolean
          example: true
    EventHistory:
      required:
        - id
        - status
        - event
        - set_on
      type: object
      properties:
        id:
          type: integer
          example: 1
        status:
          $ref: '#/components/schemas/Event_status'
        event:
          $ref: '#/components/schemas/Event'
        set_on:
          type: string
          example: 24-01-2024 10:34:53
        set_by:
          $ref: '#/components/schemas/User'
    Location:
      required:
        - id
        - address
      type: object
      properties:
        id:
          type: integer
          example: 0
        address:
          type: string
          example: Place Georges Pompidou
        city:
          type: string
          example: Toulon
        room:
          type: string
          example: 460
    LocationForm:
      required:
        - address
      type: object
      properties:
        address:
          type: string
        city:
          type: string
        room:
          type: string
    Category:
      required:
        - id
        - label
      type: object
      properties:
        id:
          type: integer
          example: 1
        label:
          type: string
          example: Règles
    Item:
      required:
        - id
        - name
        - category
      type: object
      properties:
        id:
          type: integer
          example: 0
        name:
          type: string
          example: Brochette ISEN
        category:
          $ref: '#/components/schemas/Category'
        gain:
          type: integer
          example: 98
    StockItemFormData:
      required:
        - name
        - quantity
        - location
        - category_label
      type: object
      properties:
        name:
          type: string
        quantity:
          type: integer
        location:
          $ref: '#/components/schemas/LocationForm'
        category_label:
          type: string
    StockReserveItemFormData:
      required:
        - eventId
        - item_locationId
        - quantity
      type: object
      properties:
        item_locationId:
          type: integer
        eventId:
          type: integer
        quantity:
          type: integer
        status:
          type: boolean
    Role:
      required:
        - id
        - label
      type: object
      properties:
        id:
          type: integer
          example: 1
        label:
          type: string
          example: ROLE_ADMIN
    UserRole:
      required:
        - user
        - role
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        role:
          $ref: '#/components/schemas/Role'
    AuthUserForm:
      required:
        - username
        - mail
        - lastName
        - firstName
        - role
      type: object
      properties:
        username:
          type: string
        mail:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        role:
          $ref: '#/components/schemas/Role'
    AuthLoginForm:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Permissions:
      type: object
      properties:
        id:
          type: integer
          example: 1
        label:
          type: string
          example: Read Event
    RolePermissions:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/Role'
        permission:
          $ref: '#/components/schemas/Permissions'
    ItemLocation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        item:
          $ref: '#/components/schemas/Item'
        location:
          $ref: '#/components/schemas/Location'
        quantity:
          type: integer
          example: 3
        nb_to_order:
          type: integer
          example: 1
    RolePermissionsFormatted:
      type: object
      properties:
        id:
          type: integer
          example: 1
        label:
          type: string
          example: ADMIN
        permissions:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              label:
                type: string
                example: Read Event
    ReservedItem:
      type: object
      properties:
        quantity_ret:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 1
        reserved_on:
          type: string
          example: 14-01-2024 09:32:43
        reserved_by:
          $ref: '#/components/schemas/User'
        event:
          $ref: '#/components/schemas/Event'
        item_location:
          $ref: '#/components/schemas/ItemLocation'
        status:
          type: boolean
          example: false
    Alerts:
      type: object
      properties:
        id:
          type: integer
          example: 1
        role:
          $ref: '#/components/schemas/Role'
        mail:
          type: string
          example: john.doe@isen.yncrea.fr
        set_on:
          type: string
          example: 14-01-2024 10:32:43